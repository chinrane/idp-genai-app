import streamlit as st
from utils.model_interface import classification, math_llm, summarization
from utils.textract_interface import detect_tables_forms, detect_text, run_queries, detect_pii_entities
import base64

def show_pdf(file_path):
    with open(file_path,"rb") as f:
        base64_pdf = base64.b64encode(f.read()).decode('utf-8')
    pdf_display = f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="500" height="500" type="application/pdf"></iframe>'
    st.markdown(pdf_display, unsafe_allow_html=True)

#static files

idp_logo = "/app/idp-genai-app/streamlit-docker/static/idp-logo.png"
view_demo_data = "/app/idp-genai-app/streamlit-docker/static/examples/amazon-sec-filing-full.pdf"
idp_demo_data = "/app/idp-genai-app/streamlit-docker/static/examples/pages/executive_office.pdf"
page28 = "/app/idp-genai-app/streamlit-docker/static/examples/pages/page28.pdf"
st.set_page_config(layout="wide")
st.image(idp_logo, width=450, output_format='PNG')
st.subheader('Powered by AWS Generative AI and AI Services for SEC Document Processing.')

st.info(
    """**DISCLAIMER:** 
    This demo uses a HuggingFace large language model and not intended to collect any personally identifiable information (PII) from users. 
    Please do not provide any PII when interacting with this demo. The content generated by this demo is for informational purposes only.
    """
    )

st.header("Select a Demo")


tab1, tab2, tab3, tab4, tab5 = st.tabs(
    [
        "Document Classification", 
        "Structured and Semi-Structured Data Extraction",
        "Document Summarization",
        "Document Question & Answering",
        "Mathematical Calculations",
        ])

# make it so we dont call textract for each button click need to store the text 

with tab1:
    st.header("Document Classification")
    with st.expander("Sample PDF üìÅ"):
        show_pdf(view_demo_data)

    if st.button('Classify the Sample'):
        generated_text = detect_text(idp_demo_data)
        llm_text = classification(generated_text)

        st.write("This document is classified as: ",llm_text) 
        st.header("Document de-identification")
        de_id_text = detect_pii_entities(generated_text)
        st.text_area("Scroll down:",de_id_text)


with tab2:
    st.header("Structured and Semi-Structured Data Extraction")
    with st.expander("Sample PDF üìÅ"):
        show_pdf(view_demo_data)
        
    if st.button('Extract Forms and Tables'):

        generated_text,kvlist = detect_tables_forms(idp_demo_data)
        st.text(kvlist)
        st.dataframe(generated_text)

with tab3:
    st.header("Document Summarization")
    with st.expander("Sample PDF üìÅ"):
        show_pdf(view_demo_data)
    if st.button('Summarize the Sample'):
        generated_text = detect_text(idp_demo_data)
        llm_summary = summarization(generated_text)
        summary_text = """
            Amazon has been using machine learning extensively for 25 years, employing it in everything from personalized ecommerce recommendations, to drones for Prime Air, to Alexa, to the many machine learning services AWS offers . This shift was driven by several factors, including access to higher volumes of compute capacity at lower prices than was ever available .
            """
        # st.text(llm_summary)
        st.write("**Summary:**",summary_text)

with tab4:
    st.header("Document Question & Answering")
    with st.expander("Sample PDF üìÅ"):
        show_pdf(view_demo_data)
    queries_res = run_queries(idp_demo_data)

    if options := st.selectbox(
        'Select a Query question from the samples.',
        ('Who is the Chief Executive Officer?', 'What is the company name?'),
    ):
        for query in queries_res:
            if query['Query'] == options:
                st.write("Query:", query['Query'])
                st.write("Answer:", query['Answer'])
with tab5:
    answer = "527,583"
    st.header("Mathematical Calculations")
    with st.expander("Sample PDF üìÅ"):
        show_pdf(page28)
    if st.button('Calculate the Sample'):
        generated_text = detect_text(page28)
        llm_math = math_llm(generated_text)
        # st.write("llm answer ",llm_math)
        st.write("The difference between Leased Sq ft and Owned Sq ft on Page 28 is",answer)

